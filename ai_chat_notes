# Catatan Menjalankan Proyek MERN AI ChatBot

## 1. Menjalankan Server Backend

```bash
# Masuk ke direktori backend
cd backend

# Jalankan server backend
npm run dev
```

Server backend akan berjalan di port 5000. Tunggu sampai muncul pesan:
```
Connecting to MongoDB...
Connected to MongoDB successfully!
Server running on port 5000 üöÄ
API available at http://localhost:5000/api/v1
```

**Catatan Penting:**
- Jika terjadi error `EADDRINUSE: address already in use :::5000`, berarti port 5000 sudah digunakan oleh aplikasi lain. Matikan aplikasi tersebut atau gunakan port lain dengan mengubah file `.env`.
- Pastikan MongoDB Docker container berjalan dengan perintah `docker ps | grep mongo`.
- Jika terdapat banyak proses `nodemon` yang berjalan bersamaan, matikan semua dulu dengan perintah `pkill -f node` dan jalankan ulang server.

## 2. Menjalankan Aplikasi Frontend

```bash
# Masuk ke direktori frontend
cd frontend

# Jalankan aplikasi frontend
npm run dev
```

Frontend akan berjalan di port 5173. Tunggu sampai muncul pesan:
```
VITE v4.5.13  ready in 387 ms
‚ûú  Local:   http://localhost:5173/
‚ûú  Network: use --host to expose
‚ûú  press h to show help
```

## 3. Mendaftarkan User Baru

### Cara 1: Melalui API (Command Line)

```bash
# Mendaftarkan user baru menggunakan curl
curl -X POST -H "Content-Type: application/json" \
  -d '{"name":"John Doe","email":"john@example.com","password":"Password123"}' \
  http://localhost:5000/api/v1/user/signup
```

Jika berhasil, Anda akan menerima respons seperti:
```json
{"message":"OK","name":"John Doe","email":"john@example.com"}
```

### Cara 2: Melalui Aplikasi Web

1. Buka browser dan akses `http://localhost:5173/`
2. Klik tombol "Signup" atau buka halaman `http://localhost:5173/signup`
3. Isi formulir dengan informasi:
   - Nama: (isi nama Anda)
   - Email: (isi email Anda)
   - Password: (isi password Anda, minimal 8 karakter)
4. Klik tombol "Signup"

## 4. Login dengan User yang Telah Dibuat

### Kredensial login:
- Email: john@example.com
- Password: Password123

Atau gunakan akun yang telah ada sebelumnya:
- Email: test@example.com
- Password: (password sebenarnya tidak diketahui karena tersimpan dalam bentuk hash)

## 5. Informasi Tambahan dan Troubleshooting

### Melihat Data yang Tersimpan di MongoDB
```bash
# Menampilkan semua database
docker exec mongodb mongosh --eval "show dbs"

# Melihat koleksi dalam database mern-ai-chatbot
docker exec mongodb mongosh "mern-ai-chatbot" --eval "db.getCollectionNames()"

# Menampilkan semua pengguna yang terdaftar
docker exec mongodb mongosh "mern-ai-chatbot" --eval "db.users.find({}, {name: 1, email: 1, _id: 0}).toArray()"
```

### Masalah dengan OpenAI API
Berdasarkan log error, aplikasi mengalami masalah saat mencoba mengakses OpenAI API dengan status 401 Unauthorized. Error ini terjadi karena:
1. API key OpenAI belum dikonfigurasi dengan benar di file `.env`
2. API key yang digunakan tidak valid atau telah kedaluwarsa

Untuk memperbaikinya:
```bash
# Edit file .env dan masukkan API key OpenAI yang valid
nano backend/.env
```
Ubah baris `OPENAI_API_KEY=your_openai_api_key_here` menjadi API key yang valid.

Setelah mengubah API key, restart server backend untuk menerapkan perubahan.

### Mengatasi Error 429 "Too Many Requests" dari OpenAI API

Jika Anda mengalami error 429 "Too Many Requests", itu berarti Anda telah mencapai batas penggunaan API OpenAI. Error ini umumnya terjadi karena:

1. **Rate Limiting**: OpenAI membatasi jumlah permintaan per menit/jam.
2. **Kuota Habis**: Kredit gratis untuk akun baru telah habis.
3. **Pembatasan Tier Gratis**: Akun free tier memiliki batasan yang ketat.

#### Solusi yang Diimplementasikan:

1. **Mekanisme Retry dengan Exponential Backoff**:
   - Aplikasi akan mencoba ulang permintaan hingga 3 kali
   - Setiap percobaan ulang akan menunggu lebih lama (2s, 4s, 8s)

2. **Respon Fallback**:
   - Jika semua percobaan ulang gagal, aplikasi akan memberikan respon fallback
   - Respon fallback adalah teks statis yang menginformasikan pengguna tentang masalah

#### Solusi Jangka Panjang:

1. **Upgrade Akun OpenAI**:
   - Berlangganan paket berbayar untuk mendapatkan kuota lebih tinggi

2. **Optimasi Penggunaan**:
   - Batasi panjang dan jumlah pesan yang dikirim
   - Implementasikan caching untuk respon umum
   - Batasi jumlah token yang digunakan

3. **Alternatif OpenAI API**:
   - Pertimbangkan menggunakan model open-source yang di-host sendiri
   - Gunakan layanan AI alternatif seperti Anthropic, Cohere, atau Hugging Face

Jika Anda mengalami masalah dengan API OpenAI, aplikasi akan tetap berfungsi dengan menggunakan respon fallback, meskipun dengan kemampuan yang terbatas.

## 6. Menggunakan Model Open Source sebagai Alternatif

Aplikasi telah dimodifikasi untuk mendukung model AI open-source yang dihosting sendiri sebagai alternatif OpenAI.

### Model yang Didukung

1. **OpenAI GPT-3.5 Turbo**: Model default (memerlukan API key).
2. **Mistral AI**: Model open-source berkualitas tinggi (memerlukan API key Mistral).
3. **Local LLM via Ollama**: Model yang dijalankan secara lokal di komputer Anda sendiri.
4. **Fallback**: Model statis untuk penggunaan saat tidak ada API yang tersedia.

### Konfigurasi Model Alternatif

1. **Edit file .env di direktori backend**:

```bash
nano backend/.env
```

2. **Tambahkan konfigurasi baru berikut**:

```
# Konfigurasi Model AI - pilih salah satu: "openai", "mistral", "local-llm", atau "fallback"
LLM_MODEL=openai

# Konfigurasi Mistral AI (opsional)
MISTRAL_API_KEY=your_mistral_api_key_here

# Konfigurasi untuk model lokal (opsional)
LOCAL_LLM_ENDPOINT=http://localhost:11434
LOCAL_LLM_MODEL=mistral
```

3. **Pilih model yang ingin digunakan** dengan mengubah nilai `LLM_MODEL` menjadi salah satu:
   - `openai`: Menggunakan OpenAI API (default)
   - `mistral`: Menggunakan Mistral AI API
   - `local-llm`: Menggunakan model yang dijalankan secara lokal melalui Ollama
   - `fallback`: Menggunakan respons statis tanpa API eksternal

### Mengatur Mistral AI

1. **Daftar untuk mendapatkan API key Mistral**:
   - Kunjungi [console.mistral.ai](https://console.mistral.ai)
   - Buat akun dan dapatkan API key gratis
   - Tambahkan API key ke file `.env` di variabel `MISTRAL_API_KEY`

2. **Cara Merestart Server**:
   
   Dari root proyek:
   ```bash
   # Restart semua server
   ./restart.sh
   
   # Restart individual server
   ./restart.sh backend    # Hanya restart backend
   ./restart.sh frontend   # Hanya restart frontend
   
   # Menggunakan npm script
   npm run restart         # Restart semua server
   ```

### Menggunakan Model Lokal dengan Ollama

1. **Instal Ollama**:

   macOS:
   ```bash
   curl -fsSL https://ollama.ai/install.sh | sh
   ```

   Linux:
   ```bash
   curl -fsSL https://ollama.ai/install.sh | sh
   ```

   Windows: Unduh dari [ollama.ai](https://ollama.ai)

2. **Download model yang diinginkan**:
   ```bash
   ollama pull mistral
   ```

3. **Jalankan server Ollama**:
   ```bash
   ollama serve
   ```

4. **Konfigurasi aplikasi untuk menggunakan model lokal**:
   - Edit file `.env` dan ubah `LLM_MODEL=local-llm`
   - Pastikan `LOCAL_LLM_ENDPOINT` menunjuk ke alamat server Ollama
   - Pastikan `LOCAL_LLM_MODEL` cocok dengan model yang Anda download

5. **Restart server backend**

### Kelebihan dan Kekurangan Masing-masing Model

1. **OpenAI GPT-3.5 Turbo**:
   - ‚úÖ Kualitas respons terbaik
   - ‚úÖ Dapat menjawab beragam topik
   - ‚ùå Memerlukan API key berbayar
   - ‚ùå Memiliki batasan rate limit

2. **Mistral AI**:
   - ‚úÖ Kualitas respons yang baik
   - ‚úÖ Mendukung berbagai bahasa
   - ‚úÖ API key gratis tersedia
   - ‚ùå Batasan pada akun gratis

3. **Local LLM (Ollama)**:
   - ‚úÖ Tidak ada biaya penggunaan
   - ‚úÖ Tidak ada rate limit
   - ‚úÖ Privasi data terjaga
   - ‚ùå Memerlukan hardware yang memadai (minimal 8GB RAM, lebih baik dengan GPU)
   - ‚ùå Kualitas respons tergantung model yang digunakan

4. **Fallback**:
   - ‚úÖ Selalu tersedia tanpa API
   - ‚úÖ Sangat cepat
   - ‚ùå Sangat terbatas, hanya respons statis 